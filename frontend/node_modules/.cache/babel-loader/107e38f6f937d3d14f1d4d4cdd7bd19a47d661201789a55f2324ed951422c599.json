{"ast":null,"code":"const formatType = types => {\n  const typeArray = types.split(',').map(type => type.trim());\n  let color = 'grey'; // couleur par défaut si aucun type n'est trouvé\n\n  typeArray.forEach(type => {\n    switch (type) {\n      case 'Feu':\n        color = 'red lighten-1';\n        break;\n      case 'Eau':\n        color = 'blue lighten-1';\n        break;\n      case 'Plante':\n        color = 'green lighten-1';\n        break;\n      case 'Insecte':\n        color = 'brown lighten-1';\n        break;\n      case 'Normal':\n        color = 'grey lighten-3';\n        break;\n      case 'Vol':\n        color = 'blue lighten-3';\n        break;\n      case 'Poison':\n        color = 'deep-purple accent-1';\n        break;\n      case 'Fée':\n        color = 'pink lighten-4';\n        break;\n      case 'Psy':\n        color = 'deep-purple darken-2';\n        break;\n      case 'Electrik':\n        color = 'lime accent-1';\n        break;\n      case 'Combat':\n        color = 'deep-orange';\n        break;\n      // Vous pouvez ajouter d'autres types au besoin\n    }\n  });\n  return `chip ${color}`;\n};\nexport default formatType;","map":{"version":3,"names":["formatType","types","typeArray","split","map","type","trim","color","forEach"],"sources":["C:/Users/rayan/Desktop/Code/MERNSTACK/frontend/src/helpers/format-type.ts"],"sourcesContent":["const formatType = (types: string): string => {\r\n\tconst typeArray = types.split(',').map(type => type.trim());\r\n\tlet color: string = 'grey';  // couleur par défaut si aucun type n'est trouvé\r\n  \r\n\ttypeArray.forEach(type => {\r\n\t  switch (type) {\r\n\t\tcase 'Feu':\r\n\t\t  color = 'red lighten-1';\r\n\t\t  break;\r\n\t\tcase 'Eau':\r\n\t\t  color = 'blue lighten-1';\r\n\t\t  break;\r\n\t\tcase 'Plante':\r\n\t\t  color = 'green lighten-1';\r\n\t\t  break;\r\n\t\tcase 'Insecte':\r\n\t\t  color = 'brown lighten-1';\r\n\t\t  break;\r\n\t\tcase 'Normal':\r\n\t\t  color = 'grey lighten-3';\r\n\t\t  break;\r\n\t\tcase 'Vol':\r\n\t\t  color = 'blue lighten-3';\r\n\t\t  break;\r\n\t\tcase 'Poison':\r\n\t\t  color = 'deep-purple accent-1';\r\n\t\t  break;\r\n\t\tcase 'Fée':\r\n\t\t  color = 'pink lighten-4';\r\n\t\t  break;\r\n\t\tcase 'Psy':\r\n\t\t  color = 'deep-purple darken-2';\r\n\t\t  break;\r\n\t\tcase 'Electrik':\r\n\t\t  color = 'lime accent-1';\r\n\t\t  break;\r\n\t\tcase 'Combat':\r\n\t\t  color = 'deep-orange';\r\n\t\t  break;\r\n\t\t// Vous pouvez ajouter d'autres types au besoin\r\n\t  }\r\n\t});\r\n  \r\n\treturn `chip ${color}`;\r\n  }\r\n  \r\n  export default formatType;\r\n  "],"mappings":"AAAA,MAAMA,UAAU,GAAIC,KAAa,IAAa;EAC7C,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;EAC3D,IAAIC,KAAa,GAAG,MAAM,CAAC,CAAE;;EAE7BL,SAAS,CAACM,OAAO,CAACH,IAAI,IAAI;IACxB,QAAQA,IAAI;MACb,KAAK,KAAK;QACRE,KAAK,GAAG,eAAe;QACvB;MACF,KAAK,KAAK;QACRA,KAAK,GAAG,gBAAgB;QACxB;MACF,KAAK,QAAQ;QACXA,KAAK,GAAG,iBAAiB;QACzB;MACF,KAAK,SAAS;QACZA,KAAK,GAAG,iBAAiB;QACzB;MACF,KAAK,QAAQ;QACXA,KAAK,GAAG,gBAAgB;QACxB;MACF,KAAK,KAAK;QACRA,KAAK,GAAG,gBAAgB;QACxB;MACF,KAAK,QAAQ;QACXA,KAAK,GAAG,sBAAsB;QAC9B;MACF,KAAK,KAAK;QACRA,KAAK,GAAG,gBAAgB;QACxB;MACF,KAAK,KAAK;QACRA,KAAK,GAAG,sBAAsB;QAC9B;MACF,KAAK,UAAU;QACbA,KAAK,GAAG,eAAe;QACvB;MACF,KAAK,QAAQ;QACXA,KAAK,GAAG,aAAa;QACrB;MACF;IACC;EACF,CAAC,CAAC;EAEF,OAAQ,QAAOA,KAAM,EAAC;AACrB,CAAC;AAED,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}